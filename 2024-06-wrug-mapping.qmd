---
title: Mapping and the geospatial ecosystem in R
subtitle: Warwick-R User Group
author: Carlos Cámara-Menoyo
date: 2024-06-10
date-format: long
format: 
  warwickpres-revealjs: 
    title-slide-attributes: 
      data-background-image: img/r-marks-spot.svg
      data-background-opacity: 50%
      #data-background-image: warwick-logo-white.png
      #data-background-size: 15%
      #data-background-position: 100% 0%
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
execute:
  echo: true
### To remove the logo from the title page, 
### delete lines 7-12 above and uncomment the two lines below
#format:
#  warwickpres-revealjs: default
---

## About me {.center .center-h background-image="https://slides.carloscamara.es/img/about-me/hackaton-cadaveres-inmobiliarios.jpg" background-opacity="0.75" background-color="#000000"}

[**Carlos Cámara-Menoyo**]{.larger175}

Senior Research Software Engineer</br> [Centre for Interdisciplinary Methodologies](https://warwick.ac.uk/cim)

I love maps and data visualisation.

[<https://carloscamara.es/en> \| [\@ccamara\@scholar.social](https://scholar.social/@ccamara)]{.smaller80}

::: notes
And R, and participation, and OpenStreetMap, and many other stuff. If you want to know more about me, you can find me here:
:::

## "How can I create a map using R?" {#question.center-h .center .larger125}

. . .

That's the question I've been asked a lot, and the question I will try to answer today (kind of)

## Aims {background-image="img/roadmap.png" background-opacity="0.5"}

-   Provide an **overview of the mapping process** in R
    -   Identifying different components of a map
    -   Introducing different R packages for specific tasks
-   Provide the **theoretical foundations** to understand the (many) tutorials about maps and geospatial information (with R)
-   Provide some **basic code examples** to highlight basic concepts and packages

. . .

::: callout-warning
## Out of scope:

-   Not a course on cartography or creating beautiful data visualisations or maps
-   Not a course about Spatial operations -\> Read https://r.geocompx.org/ by Robin lovelace
-   Not an advanced training on any of the packages used
:::

# What's a map? {.inverse}

##  {#map-navigation data-menu-title="Navigation maps" background-image="img/maps-car.jpg" background-color="#000000"}

::: notes
This is probably the map we are more familiar with: a routing map for cars, usually populated by Google
:::

## Points' map {.center}

![Map using colour-coded markers with icons](img/map-markers.png)

## Choropleth Maps {.center}

![Here we are mapping values (numerical or categorical) to polygon's background colours](img/map-choropleth.png)

## Heatmaps {.center}

![Heatmaps show density of information](img/heatmap.png)

##  {#map-streetfigther data-menu-title="Maps are relative (1)" background-image="img/map-streetfighter.jpg"}

##  {#map-upside-down data-menu-title="Maps & projections" background-image="img/map-projections.jpg"}

##  {#map-pokemon .center-h data-menu-title="Maps are fun"}

::: columns
::: {.column width="30%"}
![](img/map-pokemon.jpg)
:::

::: {.column width="70%"}
![An excellent [tutorial by Andrew Heiss on doing a Middle Earth Map ussing `{ggplot}` and `{sf}`](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/)](img/map-middle-earth.png)
:::
:::

-   Maps are serious, but can be fun!
-   We can map almost anything (even Pokemons or Middle Earth)

## There's no such thing as "a map"!

-   Maps can serve different purposes
-   There are many types of maps
    -   Maps are more than routing maps (usually powered by Google)
    -   Maps are more than what Google maps or political maps
-   Maps can be static (images) or interactive (web, apps)
-   Maps can visualise information in different ways (points, choropleth, facets...)
-   Maps are subjective (aka political) (i.e. north, center, projections...)

. . .

But there's something they all have in common...

# Spatial data

## Spatial data: overview

Spatial data situates something in the space (world\*). Because of Earth is round and maps are usually flat, spatial data needs to be projected using [Coordinate Reference Systems](https://en.wikipedia.org/wiki/Spatial_reference_system) (CRS)

Spatial data is different than regular data (i.e. dataframe) because it contains:

-   **Geometry**: coordinates defining and situating a point, line or polygon

-   **Attributes** for every geometry (variables and values)

-   **Coordinate Reference System** (CRS)

Currently, R's data structure to stores spatial data is a `sf` object (or spatial data frame), provided by [`{sf}` - Simple Features for R](https://r-spatial.github.io/sf/).

[\* But it could be something else, like the Moon, [Middle Earth](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/)...]{.smaller60 .bottom}

## Types of spatial data

::: columns
::: {.column width="50%"}
According to how spatial information is stored:

-   **Vector:** geometry is defined by their coordinates
-   **Raster:** made of pixels. Are thematic (i.e. land cover)
:::

::: {.column width="50%"}
According to their geometry (Vectors) :

-   **Points** expressed as pairs of `lat, long`, or `x, y` (i.e. markers).
-   **Lines** edges connecting points (i.e. streets)
-   **Polygons/Multipolygons** closed (i.e. countries' borders)
-   (basemaps)
:::
:::

## Source of spatial data:

-   From a Spatial format file: `.geojson`, `.geopkg`, `.shp`, `.topojson`, (`.csv`)

    ``` r
    sf::read_sf("data/CNTR_RG_20M_2020_4326.gpkg")
    ```

-   From Open Repositories (ONS Geoportal, Eurostat, ...)

-   Built in in some specialised packages, such as `{spData}` or `{tmap}`

-   Geocoding: translating addresses to coordinates

-   APIs like [OpenStreetMap](https://openstreetmap.com) or [Eurostat's GISCO](https://ec.europa.eu/eurostat/web/gisco).

-   Our own processes and analysis (using R)

# R packages by purpose {.smaller80}

::: columns
::: {.column width="48%"}
-   **Spatial data**
    -   [`{sf}`](https://r-spatial.github.io/sf/): provides data structure for spatial data
    -   `{sp}` (superseeded)
-   **Geocoding**
    -   [`{tidygeocoder}`](https://jessecambon.github.io/tidygeocoder/)
    -   [`{photon}`](https://github.com/rCarto/photon) (unmaintained but working)
-   **Datasets**
    -   [`{spData}`](https://jakubnowosad.com/spData/): provides spatial datasets (i.e. World country polygons)
    -   [`{giscoR}`](https://ropengov.github.io/giscoR/) an API package that helps to retrieve data from [Eurostat - GISCO](https://ec.europa.eu/eurostat/web/gisco).
    -   [`{osmdata}`](https://github.com/ropensci/osmdata) extract data from [OpenStreetMap](https://openstreetmap.com) using [Overpass API](https://overpass-turbo.eu/)
:::

::: {.column width="48%"}
-   **Static visualisation**
    -   base R plots
    -   `{ggplot}` (+ `{ggspatial}`)
    -   [`{tmap}`](https://r-tmap.github.io/tmap/index.html) creates thematic maps using grammar of graphics
    -   [`{mapsf}`](https://riatelab.github.io/mapsf/articles/mapsf.html) maps `sf` objects on base graphics.
-   **Interactive visualisation**
    -   [`{leaflet}`](https://rstudio.github.io/leaflet/) (+`{leaflet.extras}`)
    -   [`{tmap}`](https://r-tmap.github.io/tmap/index.html)
    -   [`{plotly}`](https://plotly.com/r/getting-started/)
    -   [`{highcharter}`](https://jkunst.com/highcharter/)

::: {.callout-warning appearance="simple"}
Note that the R ecosystem has changed a lot over time, and older tutorials may talk about deprecated packages such as `sp`, `ggmap`, `terra`...
:::
:::
:::

::: notes
There are more specialised packages, such as routing, or specific analyses.
:::

# Case: Geocoding with `{tidygeocoder}` {.inverse background-image="https://jessecambon.github.io/tidygeocoder/reference/figures/tidygeocoder_hex.png" background-size="10%" background-position="90% 50%"}

Translating addresses to geographical coordinates

------------------------------------------------------------------------

```{r}
locations <- c("Coventry", "University of Warwick", 
  "Centre for Interdisciplinary Methodologies" )

# Tidycoder needs a data frame structure.
locations_df <- as.data.frame(locations)

library(tidygeocoder)

# geocode the addresses
lat_longs <- locations_df |> 
  geocode(locations, method = 'osm', lat = latitude , long = longitude)

lat_longs

```

------------------------------------------------------------------------

```{r}
# Visualise
library(leaflet)

leaflet(lat_longs) |> 
  addTiles() |>
  addMarkers(popup=~locations)
```

# Case: Simple point "map" with base R {.inverse}

## Loading the "spatial" data

We will read a `csv` file containing the latitude and longitude of cities in the world:

```{r}
cities_world <- read.csv("data/worldcities.csv")

# Check the class
class(cities_world)

head(cities_world, 3)

```

## Using base R to visualise the "spatial" data

Latitude and longitude are numbers that can position a point in the world, in a similar way than `x` and `y` work in cartesian space. -\> We can use base R's `plot()`:

```{r}
plot(cities_world$lng, cities_world$lat, 
     pch = 21, bg = "red", main="World Cities")
```

##  {#dissappointment .center .center-h data-menu-title="I sense your dissappointment"}

***Is this a good map?***

. . .

Sure, we could improve this visualisation (i.e. removing borders, axis, map size according to population, adding a background...)

. . .

***Is this even a map?***

. . .

Fair point! Is this really a spatial visualisation or a regular visualisation that we read as a geographical space?

We are getting philosophical here!

::: notes
I sense your frustration. I know what you're thinking now:
:::

# Case: Simple choropleth map of the world with well-known packages {.inverse}

We will use base R and `{ggplot}` to visualise spatial data creating choropleth maps.

## Retrieving data

In this case, we will be be using data provided by the `spData` package:

```{r}
library(sf)

# Load built-in data.
world <- spData::world

# Check object's type (pay attention to the output!)
str(world)

```

::: notes
This is a `sf` object, which is very similar to well-known `data frames`.

That means that, internally, `spData` uses `sf`.
:::

------------------------------------------------------------------------

`sf` objects draw many similarities with `data frames`, so we can use well-known functions:

```{r}
# This looks very similar to a dataframe
head(world, 3)
```

::: {.callout-important collapse="true" title="Can you spot any difference with regular `data frames`?"}
Check speaker's notes for solution! (press `s`)
:::

## Visualising an sf with base R

Note that `plot()` reacts slightly differently when passing a `sf` object:

```{r}
# Plotting the entire sf object
plot(world)

```

## Plotting a single variable

::: panel-tabset
### Categorical variable

```{r}
# Plotting a categorical attribute
plot(world["continent"])
```

### Numerical variable

```{r}
# Plotting a categorical attribute
plot(world["lifeExp"], main = "Life Expectancy per country")
```
:::

Admittedly, we could use our expertise in data visualisation and base R graphics to dramatically improve this to better communicate our findings, i.e., colour scale, cutters, legend, title...but it's good enough. And quick!

## Visualising with `{ggplot}`

Some may be more familiar with `{ggplot}`, so we can use it, too (using "new" `geom_` functions):

```{r}
#| code-line-numbers: "|5,7"
#| output-location: column

library(ggplot2)

plot_ggchoro <- ggplot(world) +
  # geom_sf is used to visualise sf geometries
  geom_sf(color = "white", aes(fill = lifeExp)) +
  # geom_sf_text visualises the value of a column based on their geometries
  geom_sf_text(aes(label = iso_a2), size = 2) + 
  # Add a title and hide x and y labels.
  labs(title = "Life expectancy by country",
       x = NULL, y = NULL) +
  theme_minimal()

# Result in next slide
plot_ggchoro

```

## But there is more!

Because we are working with an `sf`, we can visualise it in a different Coordinate Reference System (CRS)

::: columns
::: {.column width="48%"}
```{r}
plot_ggchoro + # We are reusing the ggplot from the previous code
  coord_sf(crs = st_crs(3035)) #st_crs is provided by sf

```
:::

::: {.column with="\"48%"}
```{r}
plot_ggchoro + # We are reusing the ggplot from the previous code
  coord_sf(crs = "+proj=moll") #st_crs is provided by sf
```
:::
:::

More info: [Reprojecting geographic data](https://r.geocompx.org/reproj-geo-data.html?q=leaflet#reproj-geo-data) chapter in Geocmputation with R

------------------------------------------------------------------------

```{r}
# Or zooming in!
plot_ggchoro + 
  coord_sf(xlim = c(-12.48, 31.05), ylim = c(10.37, 60.07),
           expand = FALSE)
```

## Pro-tip: Plotly

[We can use `plotly::ggplotly()` to turn a ggplot map into an interactive map:]{.smaller90}

```{r}
plotly::ggplotly(plot_ggchoro)
```

## Recap

-   In this example we have used the visualisation tools and methods we are familiar with to viusalise spatial data (as opposed to regular data in the previous example).

-   But... we have also seen some of the particularities of using spatial data

In the next examples, we will be using specialised packages for visualising geospatial data

# Case: Interactive map using `{leaflet}` {.inverse}

We will create a couple of (basic) interactive maps like the ones you're used to see in many websites.

## Point maps

```{r}

library(leaflet)

leaflet(data = cities_world[cities_world$capital == "primary", ]) |> 
  addTiles() |>   # Add default OpenStreetMap map tiles
  addCircles(~lng, ~lat, radius = ~population/100, label=~city)
```

## Choropleth maps {.smaller80}

```{r}
leaflet() |> 
  addTiles() |>  # Add default OpenStreetMap map tiles
  addPolygons(data = world)
```

------------------------------------------------------------------------

```{r .code-overflow-scroll .smaller80}
#| output-location: column

# Need to define the cuts, bins and color palette beforehand.
bins <- c(0, 20, 40, 60, 80, 100, Inf)
pal <- colorBin("YlOrRd", domain = world$lifeExp, bins = bins)

map_leaflet <- leaflet() |> 
  addTiles() |>  # Add default OpenStreetMap map tiles
  addPolygons(data = world, fillColor = ~pal(lifeExp),
    weight = 2, opacity = 1, color = "white",
    dashArray = "3", fillOpacity = 0.7) 

map_leaflet
```

------------------------------------------------------------------------

```{r}
#| output-location: column
map_leaflet |>  
  addPolygons(data = world, 
    fillColor = ~pal(lifeExp),
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlightOptions = highlightOptions(
      weight = 5,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE))

```

------------------------------------------------------------------------

Combining multiple layers, interaction, fullscreen control and mini-map:

```{r}
#| output-location: column

library(leaflet.extras)

labels <- sprintf(
  "<strong>%s</strong><br/>%g years",
  world$name_long, round(world$lifeExp,2)
) %>% lapply(htmltools::HTML)


map_leaflet |> 
  setView(0,1,2) |> 
  addPolygons(data = world, 
    fillColor = ~pal(lifeExp),
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7,
    highlightOptions = highlightOptions(
      weight = 5,
      color = "#666",
      dashArray = "",
      fillOpacity = 0.7,
      bringToFront = TRUE),
    label = labels,
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "15px",
      direction = "auto")) |> 
  addCircles(data = cities_world[cities_world$capital == "primary", ],
    ~lng, ~lat, radius = ~population/100) |> 
  addMiniMap() |> 
  addFullscreenControl()
  
```

## More

-   [Getting started vignette](https://rstudio.github.io/leaflet/articles/leaflet.html)
-   [Adding legends](http://rstudio.github.io/leaflet/reference/addLegend.html)
-   [How to create interactive web maps in R using leaflet package](https://aagarw30.gitbooks.io/r-leaflet/content/) (handbook)
-   [Leaflet extras](https://trafficonese.github.io/leaflet.extras/)

# Case: Choropleth map with `{tmap}` {.inverse background-image="https://github.com/r-tmap/tmap/raw/master/man/figures/logo.png" background-size="10%" background-position="90% 50%"}

Tmap is a versatile package to create thematic maps using a [layered grammar of graphics](http://vita.had.co.nz/papers/layered-grammar.pdf) approach for maps

## Loading and exploring geospatial data

```{r}
library(tmap)

# Tmap provides a built in dataset called `World```
data(World)

class(World)

head(World, 3)
```

## Visualising with `{tmap}`

Tmap uses a "grammar of graphics" which is very similar to ggplot's:

::: columns
::: {.column width="48%"}
```{r}
tm_shape(World) + 
  tm_borders()

```
:::

::: {.column width="48%"}
```{r}
tm_shape(World) + 
  tm_borders(lw = 2, lt=4, col = "blue")

```
:::
:::

------------------------------------------------------------------------

::: columns
::: {.column width="48%"}
```{r}
tm_shape(World) +
  tm_fill()

```
:::

::: {.column width="48%"}
```{r}
tm_shape(World) +
  tm_fill("well_being")
```
:::
:::

------------------------------------------------------------------------

And we can combine them together!

```{r}
tm_shape(World) + 
  tm_fill(col = "#3C1053") + 
  tm_borders(col = "white") + 
  tm_text("iso_a3", size = 0.25)
```

------------------------------------------------------------------------

```{r}
map_demo <- tm_shape(World) +
  tm_polygons("well_being", legend.title = "Happy Planet Index", palette = "viridis") +
  tm_dots(size = "inequality", alpha = 0.5, col = "red") +
  tm_scale_bar() + #Tmap tries to position scale and compass in an empty area, but we can control their position
  tm_compass(position = c("left", "top")) +
  tm_layout(main.title = "Tmap showcase")

map_demo
```

+info: https://r-tmap.github.io/tmap-book/visual-variables.html

## Interactive mapping

```{r}
tmap_mode("view")

map_demo

```

## Facetting

```{r}

tmap_mode("plot") # Switch to printed map mode.

map_facet <- tm_shape(World) +
  tm_polygons(c("economy", "life_exp")) +
  tm_facets(ncol = 2,sync = TRUE,)

map_facet
```

------------------------------------------------------------------------

```{r}

tmap_mode("view")

map_facet

```

##  Heatmaps

![Heatmaps](img/heatmap.png)

##  Facets / small multiples

![Facetted maps](img/map-facets.png)

## Composite maps

![Combining different layers](img/tmap-example-composite.png)

##  Theming

![Themes](img/tmap-example-theming.png)

## More info about tmap

-   [Getting started vignette](https://r-tmap.github.io/tmap/articles/tmap-getstarted.html)
-   [Official Tmap handbook](https://r-tmap.github.io/tmap-book/)
-   [Geocomputation with R chapter](https://r.geocompx.org/adv-map#static-maps)

# Case: Basic spatial manipulation and visualisation with `{mapsf}` {.inverse background-image="https://riatelab.github.io/mapsf/logo.png" background-size="10%" background-position="90% 50%"}

## Overview

We are going to create a slightly more complex choropleth.

We will be joining two datasets (an sf and a data frame) and overlaying another layer with points.

To do so, we will be using a specialised library: `{mapsf}`.

## Loading data {.smaller80}

-   `englandHealthStats.csv`: A regular dataframe with National Statistics Health Index for the Upper Tier Local Authority and Regions over the 2015-2018 (no geometry)

```{r}
# Read the csv 
englandHealthStats <- read.csv("data/England_all_geog_aggregated_2018.csv")

head(englandHealthStats, 4)

```

------------------------------------------------------------------------

::: smaller80
-   `boundaries_counties_ua_buc.gpkg`: Counties and Unitary Authorities (December 2019) Boundaries UK BUC, from the [ONS Geoportal](https://geoportal.statistics.gov.uk/maps/counties-and-unitary-authorities-december-2019-boundaries-uk-buc)

```{r}
# Source: 
boundaries_counties_ua_buc <- read_sf("data/CTYUA_Dec_2019_UGCB_in_the_UK_2022_4135466293491974949.gpkg") #20m

head(boundaries_counties_ua_buc, 4)

```
:::

## Combining data together {.smaller80}

`sf` objects are "Spatial Dataframes", and as such, we can use same operations as those used with regular dataframes, such as dplyr's joins:

```{r}
sdf <- dplyr::left_join(boundaries_counties_ua_buc, englandHealthStats, 
                        by = c("ctyua19nm" = "Area_name"))

head(sdf, 4)
```

## A basic choropleth with `{mapsf}`

```{r}
library(mapsf)

mf_map(x = sdf, type = "choro", var = "low_pay")

```

------------------------------------------------------------------------

::: smaller80
We can improve it further. {mapsf} follows the same logic (And parameters) as base R graphics:

```{r}
#| output-location: slide
mf_map(x = sdf, type = "choro", var = "unempl",
  leg_title="Unemployment", breaks = "jenks")

# Highlight region with top value
mf_map(x = head(sdf[order(sdf$unempl), ],1), var = "ctyua19nm",
  type = "base", border = "red", lwd = 1, col = NULL, alpha = 0, add = TRUE )

# Labels for the top value
mf_label(
  x = head(sdf[order(sdf$unempl), ],1), var = "ctyua19nm",
  cex = 0.5, halo = TRUE, r = 0.15
)

# Inset map
mf_inset_on(x = "worldmap", pos = "topleft")
mf_worldmap(sdf)
mf_inset_off()

# Layout (title, scale, north and credits)
mf_layout(
  title = "Health indicators per Counties and Unitary Authorities",
  credits = "Sources: National Statistics Health Index 2015-2018, (December 2019)",
  frame = TRUE
)

```
:::

## More...

### 8 types of maps ([+info](https://riatelab.github.io/mapsf/articles/mapsf.html))

::: columns
::: {.column width="30%"}
![Proportional symbols](https://riatelab.github.io/mapsf/articles/mapsf_files/figure-html/mf_prop-1.png)
:::

::: {.column width="30%"}
![Poportional symbols choropleth](https://riatelab.github.io/mapsf/articles/mapsf_files/figure-html/mf_map_pc-1.png)
:::

::: {.column width="30%"}
![Links maps](https://riatelab.github.io/mapsf/articles/mapsf_files/figure-html/mf_grad-1.png)
:::
:::

------------------------------------------------------------------------

mapsf can do [facetted maps](https://riatelab.github.io/mapsf/articles/web_only/how_to_create_faceted_maps.html) (small multiples)

![[Facetted maps](https://riatelab.github.io/mapsf/articles/web_only/how_to_create_faceted_maps.html) in a loop](https://riatelab.github.io/mapsf/articles/web_only/img/fig2-1.png)

------------------------------------------------------------------------

Theming

![11 Built-in themes](img/mapsf_themes.png)

## More info

-   Extensive official documentation <https://riatelab.github.io/mapsf/>
-   Tutorial about plotting with base R <https://towardsdatascience.com/base-plotting-in-r-eb365da06b22>

# Wrap up {.inverse}

1.  We have a better understanding about what geospatial data and maps are (and what they entail!)
2.  We have been introduced to a number of packages, each one performing different functions
3.  We have been exposed to code showing affordances and potentialities of packages, to inform our decisions

## More...

::: columns
::: {.column width="70%"}
Of course, there's way more to know about working with geospatial data in R. If you're interested, please refer to [Geocomputation with R](https://r.geocompx.org/), by Robin Lovelace, Jakub Nowosad and Jannes Muenchow.
:::

::: {.column width="30%"}
![](https://r.geocompx.org/images/cover.png)
:::
:::

[...or wait to hear Robin sharing that in an upcoming WRUG session (stay tunned!)]{.smaller80}

#  {#thanks data-menu-title="Thanks" background-image="https://slides.carloscamara.es/img/thanks/t.hanks.gif"}

# [Questions?]{.center .bottom} {.inverse}

Carlos.camara\@warwick.ac.uk
